This file contains the description of what each endpoint should do

<context:CALCULATE_BOLLINGER_ENDPOINT>
Endpoint: POST /calculate-bollinger
Description: Accepts calculation jobs for Bollinger Bands. Users provide parameters including a time range for the BTC/USDT pair. Processes jobs asynchronously, utilizing RabbitMQ for queuing and Redis for caching results.
Payload Example: {"start_time": "YYYY-MM-DDTHH:MM:SSZ", "end_time": "YYYY-MM-DDTHH:MM:SSZ", "period": 20, "standard_deviation_multiplier": 2}
Response: Returns a job ID for result retrieval.
<context:CALCULATE_BOLLINGER_ENDPOINT/>

<context:RETRIEVE_BOLLINGER_RESULT_ENDPOINT>
Endpoint: GET /result/{job_id}
Description: Retrieves the result of a Bollinger Bands calculation job using the provided job ID. Fetches the result from Redis where it is cached.
Response Example: {"job_id": "xyz123", "status": "Completed", "result": {"upper_band": [], "middle_band": [], "lower_band": []}}
<context:RETRIEVE_BOLLINGER_RESULT_ENDPOINT/>

<context:SUBMIT_FAKE_ORDER_ENDPOINT>
Endpoint: POST /orders
Description: Submits a fake limit order for BTC/USDT. Order details are stored in PostgreSQL. Mimics trading action without actual market impact.
Payload Example: {"type": "limit", "price": "40000.00", "quantity": "0.5", "direction": "buy"}
Response: Returns an order ID and submission status.
<context:SUBMIT_FAKE_ORDER_ENDPOINT/>

<context:EDIT_FAKE_ORDER_ENDPOINT>
Endpoint: PUT /orders/{order_id}
Description: Allows editing of an existing fake limit order. Users can modify the order's price or quantity. Demonstrates updating data in PostgreSQL.
Payload Example: {"price": "41000.00", "quantity": "0.6"}
Response: Message indicating the update status.
<context:EDIT_FAKE_ORDER_ENDPOINT/>

<context:DELETE_FAKE_ORDER_ENDPOINT>
Endpoint: DELETE /orders/{order_id}
Description: Deletes an existing fake limit order, removing it from PostgreSQL. Showcases data deletion capabilities.
Response: Message indicating the deletion status.
<context:DELETE_FAKE_ORDER_ENDPOINT/>

<context:LIST_ALL_FAKE_ORDERS_ENDPOINT>
Endpoint: GET /orders
Description: Retrieves a list of all fake limit orders. Demonstrates reading from PostgreSQL and presenting data.
Response Example: [{"order_id": "abc123", "type": "limit", "price": "40000.00", "quantity": "0.5", "direction": "buy"}, {"order_id": "def456", "type": "limit", "price": "41000.00", "quantity": "0.6", "direction": "sell"}]
<context:LIST_ALL_FAKE_ORDERS_ENDPOINT/>