#<context:PROJECT_DESCRIPTION>
A FastAPI-based application designed to accept calculation jobs for Bollinger Bands on a 1-second timeframe for the BTC/USDT pair. Users can submit and edit fake limit orders.
#<context:PROJECT_DESCRIPTION/>

#<context:LIBRARIES>
FastAPI: A modern, fast (high-performance), web framework for building APIs with Python 3.7+.
SQLAlchemy: The Python SQL toolkit and Object-Relational Mapping (ORM) library.
Pydantic: Data validation and settings management using Python type annotations.
Tenacity: A retrying library for Python, simplifying the task of adding retry behavior.
Requests: A simple, yet elegant HTTP library for Python, built for human beings.
Standard Logger: Utilized for application logging, ensuring transparent and efficient logging practices.
#<context:LIBRARIES/>

#<context:TOOLS>
Git: The distributed version control system.
#<context:TOOLS/>

#<context:INFRASTRUCTURE>
SQLite3: as a main database
#<context:INFRASTRUCTURE/>

#<context:INTEGRATIONS_3RD_PARTY>
Binance: For retrieving live cryptocurrency data, specifically BTC/USDT pair prices on a 1-second timeframe. Binance's API is used for this purpose, with the integration requiring no API key for public data access.
#<context:INTEGRATIONS_3RD_PARTY/>

#<context:ARCHITECTURE>
main.py will contain all endpoint code using Dependency Injection
db.pt will contain db initialization logic
db_models will contain SQL Alchemy models
querries.py will contain ORM queries
binance.py will contain the binance functions needed for the integration
data_download_schedule.py will be a scheduled process downloading the data
pydantic_models.py contains the pydantic models for Inputs and returns of the api
#<context:ARCHITECTURE/>

#<context:TESTING_STRATEGY>
Postman and Manual QA: The primary methods for testing the API will involve using Postman for API endpoint testing and manual QA practices for ensuring the functionality meets the project requirements.
#<context:TESTING_STRATEGY/>